// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id           String        @id @default(cuid())
  name         String        @unique
  cards        Card[]
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("companies")
}

model Card {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(false)
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cards")
}

model SpendingLimit {
  id        String   @id @default(cuid())
  companyId String   @unique
  current   Int      @default(0)
  limit     Int
  currency  String   @default("kr")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("spending_limits")
}

model Transaction {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  description String
  dataPoints  String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId, date])
  @@map("transactions")
}

model Invoice {
  id        String    @id @default(cuid())
  companyId String
  isDue     Boolean   @default(false)
  amount    Int?
  dueDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("invoices")
}
